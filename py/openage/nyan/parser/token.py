# Copyright 2015-2015 the openage authors. See copying.md for legal info.

from openage.util import Enum


class Token:
    """
    A token is generated by a tokenizer and represents syntactical elements of
    a nyan specification file. Each token is represented by its type and its
    textual representation with the nyan file. Further the line the token
    occured within and the offset within the line is stored.
    """

    # Enumeration of all possible token types.
    Type = Enum(name="Type",
                values=[
                    "CIRCUM",      # ^
                    "COLON",       # :
                    "COMMA",       # ,
                    "LPAREN",      # (
                    "RPAREN",      # )
                    "LBRACK",      # [
                    "RBRACK",      # ]
                    "LBRACE",      # {
                    "RBRACE",      # }
                    "ELLIPSIS",    # ...
                    "ASSIGN",      # =
                    "IDENTIFIER",  # [_a-zA-Z][_a-zA-Z0-9]*
                    "INTEGER",     # integer literal, e.g. 12323
                    "FLOAT",       # float literal, e.g. 123.342
                    "STRING",      # 'foobar'
                    "FAIL",        # failed to parse token, unexpected
                                   # character or eof
                    "END"          # end of the token stream
                ])

    def __init__(self, ttype, content, line, offset):
        """
        Creates a new token with the given token type, content, line and line
        offset.
        """
        self.ttype = ttype
        self.content = content
        self.line = line
        self.offset = offset

    def __str__(self):
        ttype_name = Token.Type.reverse_lookup[self.ttype]
        return "{}:{}:{}:{}".format(self.line, self.offset, ttype_name,
                                    self.content)

    # Lookup table for mapping characters to a corresponding token type.
    CHARACTER_TYPE_LOOKUP = {
        '^': Type.CIRCUM,
        ':': Type.COLON,
        ',': Type.COMMA,
        '(': Type.LPAREN,
        ')': Type.RPAREN,
        '[': Type.LBRACK,
        ']': Type.RBRACK,
        '{': Type.LBRACE,
        '}': Type.RBRACE,
        '=': Type.ASSIGN,
    }

    @classmethod
    def get_type_for_character(cls, c):
        """
        Returns the token type for a given character. If the given character
        has no associated token type, a KeyError will be raised.
        """
        return cls.CHARACTER_TYPE_LOOKUP[c]
